"use strict";(self.webpackChunkadminapp_docs=self.webpackChunkadminapp_docs||[]).push([[6588],{1649:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>m,frontMatter:()=>a,metadata:()=>o,toc:()=>l});const o=JSON.parse('{"id":"api-reference/client/schema-experience-builder/define-form-experience","title":"defineFormExperience","description":"defineFormExperience is helper function to define form experience for a schema.","source":"@site/docs/api-reference/client/schema-experience-builder/define-form-experience.md","sourceDirName":"api-reference/client/schema-experience-builder","slug":"/api-reference/client/schema-experience-builder/define-form-experience","permalink":"/docs/api-reference/client/schema-experience-builder/define-form-experience","draft":false,"unlisted":false,"editUrl":"https://github.com/headless-adminapp/headless-adminapp.github.io/tree/main/docs/api-reference/client/schema-experience-builder/define-form-experience.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3},"sidebar":"tutorialSidebar","previous":{"title":"defineViewExperience","permalink":"/docs/api-reference/client/schema-experience-builder/define-view-experience"},"next":{"title":"MongoSchemaStore","permalink":"/docs/api-reference/server/mongo-schema-store"}}');var t=r(4848),i=r(8453);const a={sidebar_position:3},s="defineFormExperience",c={},l=[{value:"Define form experience with controls names only",id:"define-form-experience-with-controls-names-only",level:3},{value:"Advance form experience",id:"advance-form-experience",level:3},{value:"Configure tab",id:"configure-tab",level:4},{value:"Configure section",id:"configure-section",level:4},{value:"Configure control",id:"configure-control",level:4},{value:"Use custom hook",id:"use-custom-hook",level:3}];function d(e){const n={code:"code",h1:"h1",h3:"h3",h4:"h4",header:"header",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"defineformexperience",children:"defineFormExperience"})}),"\n",(0,t.jsx)(n.p,{children:"defineFormExperience is helper function to define form experience for a schema."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"builder.defineFormExperience({\n  // ...\n});\n"})}),"\n",(0,t.jsx)(n.h3,{id:"define-form-experience-with-controls-names-only",children:"Define form experience with controls names only"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"builder.defineFormExperience(['title', 'created_at']);\n"})}),"\n",(0,t.jsx)(n.h3,{id:"advance-form-experience",children:"Advance form experience"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"builder.defineFormExperience({\n  useHookFn, // Optional\n  relatedItems, // Optional\n  processFlow, // Optional\n  cloneAttributes, // Optional\n  defaultValues, // Optional\n  includeAttributes, // Optional\n  headerControls, // Optional\n  tabs, // Required (List of tabs)\n});\n"})}),"\n",(0,t.jsx)(n.h4,{id:"configure-tab",children:"Configure tab"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"// Config each columns\nconst tab1 = {\n  name: 'general',\n  label: 'General',\n  tabColumns, // Required (List of tabColumns)\n};\n\n// or start with sections\nconst tab1 = {\n  name: 'general',\n  label: 'General',\n  sections: // Required (List of sections)\n};\n\n// or directly pass controls\nconst tab1 = {\n  name: 'general',\n  label: 'General',\n  controls, // Required (List of controls)\n};\n"})}),"\n",(0,t.jsx)(n.h4,{id:"configure-section",children:"Configure section"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"const section = {\n  name,\n  label,\n  columnCount,\n  labelPosition,\n  localizedLabels,\n  hidden,\n  hideLabel,\n  noPadding,\n  controls, // Required (List of controls)\n};\n"})}),"\n",(0,t.jsx)(n.h4,{id:"configure-control",children:"Configure control"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"// Define controls by attribute names\nconst controls = ['title', 'created_at'];\n\n// or\n// Define controls by control object\nconst controls = [\n  {\n    type: 'standard',\n    attributeName: 'title',\n  },\n  {\n    type: 'standard',\n    attributeName: 'created_at',\n  },\n];\n\n// or mixed mode\nconst controls = [\n  'title',\n  {\n    type: 'standard',\n    attributeName: 'created_at',\n  },\n];\n"})}),"\n",(0,t.jsx)(n.h3,{id:"use-custom-hook",children:"Use custom hook"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",metastring:'title="useCustomHook.ts"',children:"import {\n  useContextKey,\n  useFormInstance,\n} from '@headless-adminapp/app/dataform';\nimport { useOnFieldValueChangeListener } from '@headless-adminapp/app/dataform/hooks/useOnFieldValueChangeListener';\nimport { useFormManager } from '@/packages/app/dataform/hooks/useFormManager';\n\nexport function useCustomHook() {\n  // Custom hook implementation\n  const contextKey = useContextKey(); // Context key change when schema, form or record change\n  const form = useFormInstance();\n  const formManager = useFormManager();\n\n  useOnFieldValueChangeListener('title', (value) => {\n    // Do something when title field value change\n  });\n\n  useEffect(() => {\n    // Control ui control and section satte\n    formManager.getControl('title')?.setHidden(true);\n    formManager.getSection('general')?.setHidden(true);\n  }, [formManager, contextKey]);\n}\n"})})]})}function m(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>a,x:()=>s});var o=r(6540);const t={},i=o.createContext(t);function a(e){const n=o.useContext(i);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),o.createElement(i.Provider,{value:n},e.children)}}}]);