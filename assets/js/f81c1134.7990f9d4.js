"use strict";(self.webpackChunkadminapp_docs=self.webpackChunkadminapp_docs||[]).push([[8130],{7735:e=>{e.exports=JSON.parse('{"archive":{"blogPosts":[{"id":"custom-form","metadata":{"permalink":"/blog/custom-form","editUrl":"https://github.com/headless-adminapp/headless-adminapp.github.io/blog/2025-03-01-custom-form.md","source":"@site/blog/2025-03-01-custom-form.md","title":"Custom Form","description":"Create a custom form page using the PageCustomEntityForm component. This component allows you to create a form for a custom entity that is not stored in the database or transform it before performing operations on the database.","date":"2025-03-01T00:00:00.000Z","tags":[{"inline":true,"label":"form","permalink":"/blog/tags/form"},{"inline":true,"label":"custom","permalink":"/blog/tags/custom"}],"readingTime":1.775,"hasTruncateMarker":true,"authors":[],"frontMatter":{"slug":"custom-form","title":"Custom Form","tags":["form","custom"]},"unlisted":false},"content":"Create a custom form page using the `PageCustomEntityForm` component. This component allows you to create a form for a custom entity that is not stored in the database or transform it before performing operations on the database.\\n\\n\x3c!--truncate--\x3e\\n\\nReferences:\\n\\n- [PageCustomEntityForm](/docs/getting-started/pages/custom-form)\\n- [Schema Experience Builder](/docs/api-reference/client/schema-experience-builder/)\\n\\n```tsx title=\\"data/tasks/new/page.tsx\\"\\n\'use client\';\\n\\nimport { PageCustomEntityForm } from \'@headless-adminapp/fluent/PageEntityForm/PageCustomEntityForm\';\\nimport { appointmentSchema } from \'./config/schema\';\\nimport { form } from \'./config/form\';\\nimport { retriveRecordFn, saveRecordFn } from \'./config/utils\';\\nimport { commands } from \'./config/commands\';\\n\\nexport default function Page() {\\n  return (\\n    <PageCustomEntityForm\\n      schema={appointmentSchema}\\n      form={form}\\n      commands={commands}\\n      retriveRecordFn={retriveRecordFn}\\n      saveRecordFn={saveRecordFn}\\n    />\\n  );\\n}\\n```\\n\\n```ts title=\\"data/tasks/new/config/retriveRecordFn.ts\\"\\n// Required only if form can be used to edit existing records\\nexport const retriveRecordFn = async ({\\n  recordId,\\n  dataService,\\n  form,\\n  schema,\\n  columns,\\n  schemaStore,\\n}: RetriveRecordFn) => {\\n  const record = await dataService.retriveRecord({\\n    logicalName: schema.logicalName,;\\n    id: recordId;\\n    columns;\\n  })\\n\\n  return record;\\n};\\n```\\n\\n```ts title=\\"data/tasks/new/config/saveRecordFn.ts\\"\\nexport const saveRecordFn = async ({ values }) => {\\n  const result = await dataService.createRecord(\\n    appointmentSchema.logicalName,\\n    values\\n  );\\n\\n  return {\\n    success: true,\\n    recordId: result.id,\\n  };\\n};\\n```\\n\\n```ts title=\\"data/tasks/new/config/commands.ts\\"\\nimport { DefaultCommandBuilder } from \'@headless-adminapp/app/builders/CommandBuilder/DefaultCommandBuilder\';\\nimport { iconSet } from \'@headless-adminapp/icons-fluent\';\\nimport { FormCommandBuilder } from \'@headless-adminapp/app/builders/CommandBuilder/FormCommandBuilder\';\\n\\nexport const commands = [\\n  [\\n    FormCommandBuilder.createSaveCommand({\\n      Icon: iconSet.Save,\\n      text: DefaultCommandBuilder.defaultFormCommandStrings.save,\\n    }),\\n    FormCommandBuilder.createSaveAndCloseCommand({\\n      Icon: iconSet.Save,\\n      text: DefaultCommandBuilder.defaultFormCommandStrings.saveAndClose,\\n    }),\\n  ],\\n];\\n```\\n\\n```ts title=\\"data/taskss/new/config/schema.ts\\"\\nimport { defineSchema } from \'@headless-adminapp/core/schema/utils\';\\n\\nexport const schema = defineSchema({\\n  logicalName: \'tasks\',\\n  label: \'Task\',\\n  pluralLabel: \'Tasks\',\\n  idAttribute: \'_id\',\\n  primaryAttribute: \'title\',\\n  ownership: \'global\',\\n  attributes: {\\n    _id: {\\n      type: \'id\',\\n      label: \'Id\',\\n      required: true,\\n      readonly: true,\\n      objectId: true,\\n    },\\n    title: {\\n      type: \'string\',\\n      label: \'Title\',\\n      format: \'text\',\\n      required: true,\\n    },\\n  },\\n});\\n```\\n\\n```ts title=\\"data/tasks/new/config/form.ts\\"\\nconst builder = new SchemaExperienceBuilder(schema);\\n\\nconst formExperience = builder.defineFormExperience({\\n  tabs: [\\n    {\\n      name: \'general\',\\n      label: \'General\',\\n      controls: [\'title\'],\\n    },\\n  ],\\n  useHookFn, // optional\\n  defaultValues: () => ({\\n    title: \'Task Title\',\\n  }),\\n});\\n\\nexport const form = {\\n  id: \'default\',\\n  name: \'Task\',\\n  logicalName: schema.logicalName,\\n  experience: formExperience,\\n};\\n```\\n\\n```ts title=\\"data/tasks/new/config/useHookFn.ts\\"\\nexport function useHookFn() {\\n  const form = useFormInstance();\\n\\n  const formRef = useRef(form);\\n  formRef.current = form;\\n\\n  const dataService = useDataService();\\n\\n  useOnFieldValueChangeListener(\'title\', async (value) => {\\n    // Do something when the title field value changes\\n    formRef.current.setValue(\'totalamount\', 0);\\n  });\\n}\\n```"}]}}')}}]);