"use strict";(self.webpackChunkadminapp_docs=self.webpackChunkadminapp_docs||[]).push([[6529],{2898:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>d,default:()=>p,frontMatter:()=>l,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"api-reference/data/filter/index","title":"Filter Query","description":"Filter query is used to filter records based on specific conditions. It allows you to specify the logical operator (AND/OR) and the conditions or nested filters to apply.","source":"@site/docs/api-reference/data/filter/index.md","sourceDirName":"api-reference/data/filter","slug":"/api-reference/data/filter/","permalink":"/docs/api-reference/data/filter/","draft":false,"unlisted":false,"editUrl":"https://github.com/headless-adminapp/headless-adminapp.github.io/tree/main/docs/api-reference/data/filter/index.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3},"sidebar":"tutorialSidebar","previous":{"title":"Retrive Multiple Record","permalink":"/docs/api-reference/data/data-service/retrive-records"},"next":{"title":"Data Types & Operators","permalink":"/docs/api-reference/data/filter/operators"}}');var r=n(4848),s=n(8453);const l={sidebar_position:3},d="Filter Query",o={},c=[{value:"Condition",id:"condition",level:3}];function a(e){const t={code:"code",h1:"h1",h3:"h3",header:"header",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.header,{children:(0,r.jsx)(t.h1,{id:"filter-query",children:"Filter Query"})}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-ts",children:"const filter: Filter = {\n  type: 'and',\n  conditions: [\n    // ...\n  ],\n};\n"})}),"\n",(0,r.jsx)(t.p,{children:"Filter query is used to filter records based on specific conditions. It allows you to specify the logical operator (AND/OR) and the conditions or nested filters to apply."}),"\n",(0,r.jsxs)(t.p,{children:["Nested filters can be used to create complex queries by combining multiple conditions or filters together. The ",(0,r.jsx)(t.code,{children:"type"})," property specifies the logical operator to use when combining the conditions or nested filters."]}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.strong,{children:"Complex Filter Example:"})}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-ts",children:"const filter: Filter = {\n  type: 'and',\n  filters: [\n    {\n      type: 'and',\n      conditions: [\n        // ...\n      ],\n    },\n    {\n      type: 'or',\n      conditions: [\n        // ...\n      ],\n    },\n  ],\n};\n"})}),"\n",(0,r.jsx)(t.h3,{id:"condition",children:"Condition"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-ts",children:"interface Condition {\n  field: string;\n  operator: OperatorKey;\n  value: any;\n  extendedKey?: string;\n}\n"})}),"\n",(0,r.jsx)(t.p,{children:"Condition is used to specify a single condition for filtering records. It includes the field name, operator, and value to compare against."}),"\n",(0,r.jsxs)(t.table,{children:[(0,r.jsx)(t.thead,{children:(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.th,{style:{textAlign:"left"},children:"Property"}),(0,r.jsx)(t.th,{style:{textAlign:"left"},children:"Type"}),(0,r.jsx)(t.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,r.jsxs)(t.tbody,{children:[(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{style:{textAlign:"left"},children:(0,r.jsx)(t.code,{children:"field"})}),(0,r.jsx)(t.td,{style:{textAlign:"left"},children:(0,r.jsx)(t.code,{children:"string"})}),(0,r.jsx)(t.td,{style:{textAlign:"left"},children:"The name of the field to filter on."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{style:{textAlign:"left"},children:(0,r.jsx)(t.code,{children:"operator"})}),(0,r.jsx)(t.td,{style:{textAlign:"left"},children:(0,r.jsx)(t.code,{children:"OperatorKey"})}),(0,r.jsx)(t.td,{style:{textAlign:"left"},children:"The operator to use for comparison."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{style:{textAlign:"left"},children:(0,r.jsx)(t.code,{children:"value"})}),(0,r.jsx)(t.td,{style:{textAlign:"left"},children:(0,r.jsx)(t.code,{children:"any"})}),(0,r.jsx)(t.td,{style:{textAlign:"left"},children:"The value to compare against."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{style:{textAlign:"left"},children:(0,r.jsx)(t.code,{children:"extendedKey"})}),(0,r.jsx)(t.td,{style:{textAlign:"left"},children:(0,r.jsx)(t.code,{children:"string"})}),(0,r.jsx)(t.td,{style:{textAlign:"left"},children:"The extended key of referenced record (optional)."})]})]})]})]})}function p(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(a,{...e})}):a(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>l,x:()=>d});var i=n(6540);const r={},s=i.createContext(r);function l(e){const t=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function d(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),i.createElement(s.Provider,{value:t},e.children)}}}]);