"use strict";(self.webpackChunkadminapp_docs=self.webpackChunkadminapp_docs||[]).push([[6927],{846:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>m,contentTitle:()=>i,default:()=>d,frontMatter:()=>s,metadata:()=>o,toc:()=>c});var o=t(3654),r=t(4848),a=t(8453);const s={slug:"custom-form",title:"Custom Form",tags:["form","custom"]},i=void 0,m={authorsImageUrls:[]},c=[];function l(e){const n={a:"a",code:"code",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.p,{children:["Create a custom form page using the ",(0,r.jsx)(n.code,{children:"PageCustomEntityForm"})," component. This component allows you to create a form for a custom entity that is not stored in the database or transform it before performing operations on the database."]}),"\n",(0,r.jsx)(n.p,{children:"References:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"/docs/getting-started/pages/custom-form",children:"PageCustomEntityForm"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"/docs/api-reference/client/schema-experience-builder/",children:"Schema Experience Builder"})}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",metastring:'title="data/tasks/new/page.tsx"',children:"'use client';\n\nimport { PageCustomEntityForm } from '@headless-adminapp/fluent/PageEntityForm/PageCustomEntityForm';\nimport { appointmentSchema } from './config/schema';\nimport { form } from './config/form';\nimport { retriveRecordFn, saveRecordFn } from './config/utils';\nimport { commands } from './config/commands';\n\nexport default function Page() {\n  return (\n    <PageCustomEntityForm\n      schema={appointmentSchema}\n      form={form}\n      commands={commands}\n      retriveRecordFn={retriveRecordFn}\n      saveRecordFn={saveRecordFn}\n    />\n  );\n}\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",metastring:'title="data/tasks/new/config/retriveRecordFn.ts"',children:"// Required only if form can be used to edit existing records\nexport const retriveRecordFn = async ({\n  recordId,\n  dataService,\n  form,\n  schema,\n  columns,\n  schemaStore,\n}: RetriveRecordFn) => {\n  const record = await dataService.retriveRecord({\n    logicalName: schema.logicalName,;\n    id: recordId;\n    columns;\n  })\n\n  return record;\n};\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",metastring:'title="data/tasks/new/config/saveRecordFn.ts"',children:"export const saveRecordFn = async ({ values }) => {\n  const result = await dataService.createRecord(\n    appointmentSchema.logicalName,\n    values\n  );\n\n  return {\n    success: true,\n    recordId: result.id,\n  };\n};\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",metastring:'title="data/tasks/new/config/commands.ts"',children:"import { DefaultCommandBuilder } from '@headless-adminapp/app/builders/CommandBuilder/DefaultCommandBuilder';\nimport { iconSet } from '@headless-adminapp/icons-fluent';\nimport { FormCommandBuilder } from '@headless-adminapp/app/builders/CommandBuilder/FormCommandBuilder';\n\nexport const commands = [\n  [\n    FormCommandBuilder.createSaveCommand({\n      Icon: iconSet.Save,\n      text: DefaultCommandBuilder.defaultFormCommandStrings.save,\n    }),\n    FormCommandBuilder.createSaveAndCloseCommand({\n      Icon: iconSet.Save,\n      text: DefaultCommandBuilder.defaultFormCommandStrings.saveAndClose,\n    }),\n  ],\n];\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",metastring:'title="data/taskss/new/config/schema.ts"',children:"import { defineSchema } from '@headless-adminapp/core/schema/utils';\n\nexport const schema = defineSchema({\n  logicalName: 'tasks',\n  label: 'Task',\n  pluralLabel: 'Tasks',\n  idAttribute: '_id',\n  primaryAttribute: 'title',\n  ownership: 'global',\n  attributes: {\n    _id: {\n      type: 'id',\n      label: 'Id',\n      required: true,\n      readonly: true,\n      objectId: true,\n    },\n    title: {\n      type: 'string',\n      label: 'Title',\n      format: 'text',\n      required: true,\n    },\n  },\n});\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",metastring:'title="data/tasks/new/config/form.ts"',children:"const builder = new SchemaExperienceBuilder(schema);\n\nconst formExperience = builder.defineFormExperience(['title']),\n  useHookFn, // optional\n  defaultValues: () => ({\n    title: 'Task Title',\n  }),\n});\n\nexport const form = {\n  id: 'default',\n  name: 'Task',\n  logicalName: schema.logicalName,\n  experience: formExperience,\n};\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",metastring:'title="data/tasks/new/config/useHookFn.ts"',children:"export function useHookFn() {\n  const form = useFormInstance();\n\n  const formRef = useRef(form);\n  formRef.current = form;\n\n  const dataService = useDataService();\n\n  useOnFieldValueChangeListener('title', async (value) => {\n    // Do something when the title field value changes\n    formRef.current.setValue('totalamount', 0);\n  });\n}\n"})})]})}function d(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>i});var o=t(6540);const r={},a=o.createContext(r);function s(e){const n=o.useContext(a);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),o.createElement(a.Provider,{value:n},e.children)}},3654:e=>{e.exports=JSON.parse('{"permalink":"/blog/custom-form","editUrl":"https://github.com/headless-adminapp/headless-adminapp.github.io/blog/2025-03-01-custom-form.md","source":"@site/blog/2025-03-01-custom-form.md","title":"Custom Form","description":"Create a custom form page using the PageCustomEntityForm component. This component allows you to create a form for a custom entity that is not stored in the database or transform it before performing operations on the database.","date":"2025-03-01T00:00:00.000Z","tags":[{"inline":true,"label":"form","permalink":"/blog/tags/form"},{"inline":true,"label":"custom","permalink":"/blog/tags/custom"}],"readingTime":1.72,"hasTruncateMarker":true,"authors":[],"frontMatter":{"slug":"custom-form","title":"Custom Form","tags":["form","custom"]},"unlisted":false}')}}]);